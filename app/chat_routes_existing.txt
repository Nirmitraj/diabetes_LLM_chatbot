@main.route('/user/<user_id>', methods=['DELETE'])
@jwt_required()
def delete_user(user_id):
    user = User.query.filter_by(id=user_id, is_active=1).first()
    if not user:
        return jsonify({'message': 'User not found!'})
    user.is_active = 0
    db.session.commit()
    return jsonify({'message': 'User deleted successfully!'})

@main.route('/chat', methods=['GET', 'POST'])
@jwt_required(optional=True)  # Only require JWT for POST
def chat():
    if request.method == 'GET':
        current_app.logger.info("GET /chat request received.")
        return render_template('chat.html')

    # Process the POST request to handle chat messages
    data = request.get_json()
    current_app.logger.info("POST /chat request received with data: %s", data)
    current_app.logger.info("Request JSON: %s", request.get_json())
    current_app.logger.info("Request Headers: %s", dict(request.headers))
    current_app.logger.info("Request Cookies: %s", request.cookies)
    current_app.logger.info("Request Args: %s", request.args)
    current_app.logger.info("Request Form: %s", request.form)
    current_app.logger.info("Session Data: %s", dict(session))

    if not data or 'query' not in data:
        current_app.logger.warning("Invalid request: Missing 'query' key.")
        return jsonify({'message': 'Invalid request: missing query'}), 400

    # Retrieve chat history from session
    chat_history = session.get('chat_history', [])
    current_app.logger.info("Session chat history loaded: %d entries", len(chat_history))

    # Append the user's query to the chat history
    chat_history.append({'role': 'user', 'content': data['query']})
    current_app.logger.info("User query added to chat history: %s", data['query'])

    # Get user ID and save user's message to the database
    current_user = get_jwt_identity()
    current_app.logger.info("get_jwt_identity() on routes.py line 274 returns: %s", current_user)
    user_id = current_user.get('id') if current_user else None
    if user_id:
        user_message = ChatHistory(
            user_id=user_id,
            title=f"Chat {user_id}",
            last_message=data['query'],
            role='user',
            content=data['query'],
            timestamp=datetime.utcnow()
        )
        db.session.add(user_message)
        db.session.commit()
        current_app.logger.info(
            "User message saved to ChatHistory: Title=%s, Role=%s, User ID=%s, Timestamp=%s",
            user_message.title, user_message.role, user_message.user_id, user_message.timestamp
        )

    # Generate the AI response
    response = get_user_query_response(data['query'], chat_history)
    if response:
        chat_history.append({'role': 'assistant', 'content': response})
        session['chat_history'] = chat_history

        # Save the AI response to the database
        if user_id:
            assistant_response = ChatHistory(
                user_id=user_id,
                title=f"Chat {user_id}",
                last_message=response,
                role='assistant',
                content=response,
                timestamp=datetime.utcnow()
            )
            db.session.add(assistant_response)
            db.session.commit()
            current_app.logger.info(
                "AI response saved to ChatHistory: Title=%s, Role=%s, User ID=%s, Timestamp=%s, Content=%s",
                assistant_response.title, assistant_response.role, assistant_response.user_id,
                assistant_response.timestamp, assistant_response.content
            )

        return jsonify({'response': response})
    else:
        current_app.logger.error("Failed to generate AI response.")
        return jsonify({'message': 'Request could not be processed.'}), 500